@page "/fetchdata"
@attribute [Authorize]

@using MauiBlazorAuth0App.Data
@using MauiBlazorAuth0App.Models
@using MauiBlazorAuth0App.Services
@inject ITodoService TodoService
@inject NavigationManager NavManager

<h1 class="mb-4">My Task</h1>
@*<p>Total task: @todos.Count()</p>*@

@if (todos == null)
{
    <p><em>You don't have any task.</em></p>
}
else
{
    @foreach (var todo in todos)
    {
        <div class="container my-2 pill-hove">
            @if (todo.IsCompleted == true)
            {
                <div class="card todo-done">
                    <div class="card-body">
                        <div class="row justify-content-between">
                            <div class="col">
                                <div class="card-text">@todo.Due.ToString("dddd, dd MMM yyyy - hh:mm tt")</div>
                            </div>
                            <div class="col">
                                @if (todo.IsCompleted == true)
                                {
                                    <p style="color:green; font-weight:bold" class="h6 float-end text-end">Done</p>
                                }
                                else if (todo.Due < currentDate && todo.IsCompleted != true)
                                {
                                    <p style="color:red; font-weight:bold" class="h6 float-end text-end">Missed</p>
                                }
                                else
                                {
                                    <p></p>
                                }
                            </div>
                        </div>
                        <div class="card-title todo-title">@todo.Title</div>
                        <div class="justify-content-end float-end">
                            <button type="submit" @onclick="@(()=>EditTodo(todo.TodoId))" class="btn btn-primary">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                                    <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
                                    <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z" />
                                </svg>
                            </button>


                            <button type="submit" @onclick="@(()=>DeleteTodo(todo))" class="btn btn-danger">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash3" viewBox="0 0 16 16">
                                    <path d="M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5ZM11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H2.506a.58.58 0 0 0-.01 0H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1h-.995a.59.59 0 0 0-.01 0H11Zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5h9.916Zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47ZM8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5Z" />
                                </svg>
                            </button>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="card">
                    <div class="card-body">
                        @if (IsDueDateNear(@todo.Due) && !(todo.Due < currentDate))
                        {
                            <span class="bold badge rounded-pill due-pill">Due Soon!</span>
                        }
                        <div class="row justify-content-between">
                            <div class="col">
                                <div class="card-text">@todo.Due.ToString("dddd, dd MMM yyyy - hh:mm tt")</div>
                            </div>
                            <div class="col">
                                @if (todo.IsCompleted == true)
                                {
                                    <p style="color:green; font-weight:bold" class="h6 float-end text-end">Done</p>
                                }
                                else if (todo.Due < currentDate && todo.IsCompleted != true)
                                {
                                    <p style="color:red; font-weight:bold" class="h6 float-end text-end">Missed</p>
                                }
                                else
                                {
                                    <p></p>
                                }
                            </div>
                        </div>
                        <div class="card-title todo-title">@todo.Title</div>
                        <div class="justify-content-end float-end">
                            <button type="submit" @onclick="@(()=>EditTodo(todo.TodoId))" class="btn btn-primary">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                                    <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
                                    <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z" />
                                </svg>
                            </button>

                            <button type="submit" @onclick="@(()=>DeleteTodo(todo))" class="btn btn-danger">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash3" viewBox="0 0 16 16">
                                    <path d="M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5ZM11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H2.506a.58.58 0 0 0-.01 0H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1h-.995a.59.59 0 0 0-.01 0H11Zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5h9.916Zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47ZM8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5Z" />
                                </svg>
                            </button>
                        </div>
                    </div>
                </div>
            }

        </div>

    }
}

@code {
    private List<TodoModel> todos;
    DateTime currentDate = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        todos = await TodoService.GetAllTodo();
    }

    private bool IsDueDateNear(DateTime dueDate)
    {
        var timeDifference = dueDate - DateTime.Now;
        return timeDifference.TotalDays <= 1;
    }

    private void EditTodo(int todoId)
    {
        NavManager.NavigateTo($"update_todo/{todoId}");
    }

    private async void DeleteTodo(TodoModel todo)
    {
        var response = await TodoService.DeleteTodo(todo);
        if (response > 0)
        {
            await OnInitializedAsync();
            this.StateHasChanged();

            await App.Current.MainPage.DisplayAlert("Task Deleted!", "Your task has been deleted from the table", "OK");
        }
    }
}
